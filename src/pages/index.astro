---
import Base from '../layouts/Base.astro';
import { appVisibility } from '../config/access-control';

// App metadata for display
const appInfo: Record<string, { title: string; description: string; icon: string }> = {
  home: {
    title: 'Home',
    description: 'Main landing page',
    icon: '🏠'
  },
  watchparty: {
    title: 'Watch Party',
    description: 'Synchronized video watching with friends',
    icon: '🎬'
  },
  task: {
    title: 'Task Manager',
    description: 'Track and manage your tasks',
    icon: '✅'
  },
  contact: {
    title: 'Contact',
    description: 'Get in touch',
    icon: '📧'
  },
  herodraft: {
    title: 'Hero Draft',
    description: 'Draft your team',
    icon: '🎮'
  }
};
---

<Base title="Hadoku - Home">
  <div class="max-w-screen-xl mx-auto px-8 min-h-screen">
    <!-- Theme Picker -->
    <div class="flex justify-end pt-4 pb-2">
      <div class="relative" id="theme-picker-container">
        <button 
          id="theme-picker-button"
          class="flex items-center gap-2 px-4 py-2 bg-bg-card border-2 border-border rounded-lg hover:border-primary transition-all duration-smooth text-text-secondary hover:text-text"
          aria-label="Select theme"
        >
          <span id="current-theme-icon">🎨</span>
          <span id="current-theme-name" class="text-sm font-semibold">Theme</span>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        
        <div 
          id="theme-picker-menu"
          class="hidden absolute right-0 mt-2 w-64 bg-bg-card border-2 border-border rounded-lg shadow-modal overflow-hidden z-50"
        >
          <div class="p-2 border-b border-border">
            <p class="text-xs font-semibold text-text-secondary uppercase tracking-wide px-2 py-1">
              Select Theme
            </p>
          </div>
          <div id="theme-options" class="max-h-96 overflow-y-auto">
            <!-- Theme options will be populated by script -->
          </div>
        </div>
      </div>
    </div>

    <header class="text-center mb-12">
      <h1 class="text-5xl font-bold mb-2 bg-gradient-to-br from-primary to-primary-dark bg-clip-text text-transparent border-b-4 border-transparent pb-2 inline-block">
        Hadoku
      </h1>
      <p class="text-xl text-text-secondary">
        Your Personal Micro-Frontend Hub
      </p>
    </header>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8" id="apps-grid">
      <!-- Apps will be populated by client-side script -->
    </div>

    <div class="text-center p-8 bg-neutral-lighter rounded-lg text-text-muted hidden" id="access-info">
      <p>👋 Welcome! Some apps require special access.</p>
      <p>Contact the admin for access keys.</p>
    </div>
  </div>

  <script type="module" define:vars={{ 
    appInfo, 
    appVisibility,
    adminKey: import.meta.env.PUBLIC_ADMIN_KEY || 'default-admin-key',
    friendKey: import.meta.env.PUBLIC_FRIEND_KEY || 'default-friend-key'
  }}>
    // Wait for theme system to be available
    function waitForThemes(callback) {
      if (window.hadokuThemes) {
        callback();
      } else {
        setTimeout(() => waitForThemes(callback), 50);
      }
    }
    
    waitForThemes(() => {
      const { THEMES, getTheme, setTheme, saveTheme } = window.hadokuThemes;
    
    // Theme metadata with icons
    const themeMetadata = {
      'light': { name: 'Light', icon: '☀️', category: 'Default' },
      'dark': { name: 'Dark', icon: '🌙', category: 'Default' },
      'strawberry-light': { name: 'Strawberry Light', icon: '🍓', category: 'Strawberry' },
      'strawberry-dark': { name: 'Strawberry Dark', icon: '🍓', category: 'Strawberry' },
      'ocean-light': { name: 'Ocean Light', icon: '🌊', category: 'Ocean' },
      'ocean-dark': { name: 'Ocean Dark', icon: '🌊', category: 'Ocean' },
      'cyberpunk-light': { name: 'Cyberpunk Light', icon: '🤖', category: 'Cyberpunk' },
      'cyberpunk-dark': { name: 'Cyberpunk Dark', icon: '🤖', category: 'Cyberpunk' },
      'coffee-light': { name: 'Coffee Light', icon: '☕', category: 'Coffee' },
      'coffee-dark': { name: 'Coffee Dark', icon: '☕', category: 'Coffee' },
      'lavender-light': { name: 'Lavender Light', icon: '💜', category: 'Lavender' },
      'lavender-dark': { name: 'Lavender Dark', icon: '💜', category: 'Lavender' },
      'nature-light': { name: 'Nature Light', icon: '🌿', category: 'Nature' },
      'nature-dark': { name: 'Nature Dark', icon: '🌿', category: 'Nature' },
      'pink-light': { name: 'Pink Light', icon: '💗', category: 'Pink' },
      'pink-dark': { name: 'Pink Dark', icon: '💗', category: 'Pink' }
    };
    
    // Initialize theme picker
    function initThemePicker() {
      const button = document.getElementById('theme-picker-button');
      const menu = document.getElementById('theme-picker-menu');
      const optionsContainer = document.getElementById('theme-options');
      const currentThemeIcon = document.getElementById('current-theme-icon');
      const currentThemeName = document.getElementById('current-theme-name');
      
      // Get current theme
      const currentTheme = getTheme();
      
      // Update button to show current theme
      function updateButton(theme) {
        const meta = themeMetadata[theme];
        if (meta) {
          currentThemeIcon.textContent = meta.icon;
          currentThemeName.textContent = meta.name;
        }
      }
      
      updateButton(currentTheme);
      
      // Group themes by category
      const grouped = {};
      THEMES.forEach(theme => {
        const meta = themeMetadata[theme];
        if (!meta) {
          console.warn('Missing theme metadata for:', theme);
          return;
        }
        if (!grouped[meta.category]) {
          grouped[meta.category] = [];
        }
        grouped[meta.category].push(theme);
      });
      
      // Populate theme options
      Object.keys(grouped).forEach(category => {
        // Add category label
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'px-4 py-2 text-xs font-semibold text-text-tertiary uppercase tracking-wide bg-neutral-lighter';
        categoryDiv.textContent = category;
        optionsContainer.appendChild(categoryDiv);
        
        // Add themes in category
        grouped[category].forEach(theme => {
          const meta = themeMetadata[theme];
          if (!meta) return;
          const option = document.createElement('button');
          option.className = `w-full px-4 py-2 flex items-center gap-3 hover:bg-primary-hover transition-colors text-left ${theme === currentTheme ? 'bg-primary-hover' : ''}`;
          option.innerHTML = `
            <span class="text-xl">${meta.icon}</span>
            <span class="text-sm font-medium text-text">${meta.name}</span>
            ${theme === currentTheme ? '<span class="ml-auto text-primary text-xl">✓</span>' : ''}
          `;
          option.addEventListener('click', () => {
            setTheme(theme);
            saveTheme(theme);
            updateButton(theme);
            menu.classList.add('hidden');
            
            // Update all options to remove/add checkmark
            optionsContainer.querySelectorAll('button').forEach(btn => {
              btn.classList.remove('bg-primary-hover');
              const checkmark = btn.querySelector('.ml-auto');
              if (checkmark) checkmark.remove();
            });
            option.classList.add('bg-primary-hover');
            const checkmark = document.createElement('span');
            checkmark.className = 'ml-auto text-primary text-xl';
            checkmark.textContent = '✓';
            option.appendChild(checkmark);
          });
          optionsContainer.appendChild(option);
        });
      });
      
      // Toggle menu
      button.addEventListener('click', (e) => {
        e.stopPropagation();
        menu.classList.toggle('hidden');
      });
      
      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!menu.classList.contains('hidden') && !button.contains(e.target) && !menu.contains(e.target)) {
          menu.classList.add('hidden');
        }
      });
    }
    
    // Initialize theme picker when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initThemePicker);
    } else {
      initThemePicker();
    }
    
    // Get access key from URL
    const params = new URLSearchParams(window.location.search);
    const key = params.get('key');
    
    // Access configuration (from build-time env vars)
    const ADMIN_KEY = adminKey;
    const FRIEND_KEY = friendKey;
    
    // Determine user type based on key
    let userType = 'public';
    if (key === ADMIN_KEY) {
      userType = 'admin';
    } else if (key === FRIEND_KEY) {
      userType = 'friend';
    }
    
    // Apply visual theme based on user type (without exposing key)
    document.body.setAttribute('data-user-type', userType);
    
    // Get accessible apps for this user type
    const accessibleApps = appVisibility[userType] || ['home'];
    console.log('User type:', userType, 'Accessible apps:', accessibleApps);
    
    // Populate apps grid
    const appsGrid = document.getElementById('apps-grid');
    if (appsGrid) {
      const appsToShow = accessibleApps.filter(app => app !== 'home');
      console.log('Apps to show:', appsToShow);
      
      appsGrid.innerHTML = appsToShow.map(app => {
        const info = appInfo[app] || { title: app, description: 'No description', icon: '📦' };
        const href = `/${app}${key ? `?key=${key}` : ''}`;
        
        return `
          <a href="${href}" class="app-card bg-bg-card border-2 border-border rounded-lg p-8 no-underline text-inherit transition-all duration-smooth flex flex-col items-center text-center hover:-translate-y-1 hover:shadow-md hover:border-primary">
            <div class="text-5xl mb-4">${info.icon}</div>
            <h3 class="text-2xl font-semibold mb-2">${info.title}</h3>
            <p class="text-text-muted text-sm">${info.description}</p>
          </a>
        `;
      }).join('');
    }
    
    // Hide access info (everyone can see all basic apps now)
    const accessInfo = document.getElementById('access-info');
    if (accessInfo) {
      accessInfo.style.display = 'none';
    }
    
    }); // End waitForThemes callback
  </script>

  <style>
    /* Visual indicators based on user type - no text exposed */
    :global(body[data-user-type="friend"] .text-transparent) {
      border-bottom-color: var(--color-success); /* Blue trim for friend */
    }
    
    :global(body[data-user-type="admin"] .text-transparent) {
      border-bottom-color: var(--color-danger); /* Purple/Pink trim for admin */
    }
    
    /* Subtle card border colors based on user type */
    :global(body[data-user-type="friend"] .app-card) {
      border-color: rgba(14, 165, 233, 0.3); /* Light blue for friend */
    }
    
    :global(body[data-user-type="friend"] .app-card:hover) {
      border-color: var(--color-success);
      box-shadow: 0 12px 24px rgba(14, 165, 233, 0.2);
    }
    
    :global(body[data-user-type="admin"] .app-card) {
      border-color: rgba(192, 132, 252, 0.3); /* Light purple for admin */
    }
    
    :global(body[data-user-type="admin"] .app-card:hover) {
      border-color: var(--color-danger);
      box-shadow: 0 12px 24px rgba(192, 132, 252, 0.2);
    }
  </style>
</Base>

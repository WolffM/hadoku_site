---
interface Props {
  title: string;
}

const { title } = Astro.props;

// Access control keys for client-side user type detection
const adminKey = import.meta.env.PUBLIC_ADMIN_KEY || '';
const friendKey = import.meta.env.PUBLIC_FRIEND_KEY || '';

// Import global styles with Tailwind and themes
import '../styles/global.css';
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Hadoku Site - Micro-frontend controller app">
  <meta name="admin-key" content={adminKey}>
  <meta name="friend-key" content={friendKey}>
  <title>{title}</title>
  
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  
  <!-- Cloudflare Web Analytics -->
  {import.meta.env.PUBLIC_CF_ANALYTICS_TOKEN && (
    <script 
      defer 
      src='https://static.cloudflareinsights.com/beacon.min.js' 
      data-cf-beacon={`{"token": "${import.meta.env.PUBLIC_CF_ANALYTICS_TOKEN}"}`}
    />
  )}
  
  <!-- Import map for micro-frontend dependencies -->
  <script type="importmap">
    {
      "imports": {
        "react": "https://esm.sh/react@19",
        "react-dom/client": "https://esm.sh/react-dom@19/client",
        "react/jsx-runtime": "https://esm.sh/react@19/jsx-runtime"
      }
    }
  </script>
  
  <!-- Theme system - inlined to avoid import issues -->
  <script type="module">
    // Theme constants and functions
    const THEMES = [
      'light', 'dark', 'coffee-light', 'coffee-dark', 'nature-light', 'nature-dark',
      'lavender-light', 'lavender-dark', 'strawberry-light', 'strawberry-dark',
      'ocean-light', 'ocean-dark', 'cyberpunk-light', 'cyberpunk-dark',
      'pink-light', 'pink-dark'
    ];
    
    function setTheme(theme) {
      if (theme === 'light') {
        document.documentElement.removeAttribute('data-theme');
      } else {
        document.documentElement.setAttribute('data-theme', theme);
      }
    }
    
    function getTheme() {
      const attr = document.documentElement.getAttribute('data-theme');
      return attr || 'light';
    }
    
    function saveTheme(theme) {
      sessionStorage.setItem('hadoku-theme', theme);
      setTheme(theme);
    }
    
    function loadTheme() {
      const saved = sessionStorage.getItem('hadoku-theme');
      if (saved && THEMES.includes(saved)) {
        setTheme(saved);
        return saved;
      }
      return 'light';
    }
    
    function initTheme() {
      return loadTheme();
    }
    
    // Initialize theme on page load and make functions globally available
    document.addEventListener('DOMContentLoaded', () => {
      const theme = initTheme();
      console.log('Theme initialized:', theme);
      
      // Make theme functions globally available
      window.hadokuThemes = {
        THEMES,
        setTheme,
        getTheme,
        saveTheme,
        loadTheme,
        initTheme
      };
    });
  </script>
</head>
<body>
  <slot />
</body>
</html>

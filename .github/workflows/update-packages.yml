name: Update Packages (All Micro-Frontends)

on:
  repository_dispatch:
    types: [packages_updated]
  workflow_dispatch:
    inputs:
      packages:
        description: 'Comma-separated packages (e.g. @wolffm/task,@wolffm/themes,@wolffm/watchparty-ui)'
        required: true
        default: '@wolffm/task,@wolffm/themes,@wolffm/watchparty-ui'

permissions:
  contents: write
  packages: read

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.HADOKU_SITE_TOKEN }}
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
      
      - name: Create .npmrc for GitHub Packages
        run: |
          echo "@wolffm:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.DEPLOY_PACKAGE_TOKEN }}" >> .npmrc
      
      - name: Parse packages to update
        id: parse
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Compact the JSON to remove newlines/spaces
            PACKAGES=$(echo '${{ toJson(github.event.client_payload.packages) }}' | jq -c .)
          else
            IFS=',' read -ra PKG_ARRAY <<< "${{ github.event.inputs.packages }}"
            PACKAGES=$(printf '%s\n' "${PKG_ARRAY[@]}" | jq -R . | jq -s . | jq -c .)
          fi
          
          echo "📦 Packages to update: $PACKAGES"
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          
          # Check if task package needs update
          if echo "$PACKAGES" | jq -e 'map(select(. == "@wolffm/task")) | length > 0' > /dev/null; then
            echo "update_task=true" >> $GITHUB_OUTPUT
            echo "✅ Will update @wolffm/task"
          else
            echo "update_task=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if themes package needs update
          if echo "$PACKAGES" | jq -e 'map(select(. == "@wolffm/themes")) | length > 0' > /dev/null; then
            echo "update_themes=true" >> $GITHUB_OUTPUT
            echo "✅ Will update @wolffm/themes"
          else
            echo "update_themes=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if watchparty package needs update
          if echo "$PACKAGES" | jq -e 'map(select(. == "@wolffm/watchparty-ui")) | length > 0' > /dev/null; then
            echo "update_watchparty=true" >> $GITHUB_OUTPUT
            echo "✅ Will update @wolffm/watchparty-ui"
          else
            echo "update_watchparty=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Backup KV namespace before package update
        if: steps.parse.outputs.update_task == 'true'
        id: backup
        continue-on-error: true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_NAMESPACE_ID: ${{ secrets.CLOUDFLARE_NAMESPACE_ID }}
        run: |
          echo "📦 Creating KV backup before @wolffm/task package update..."
          
          # Install wrangler globally
          npm install -g wrangler
          
          # Get current version before update
          CURRENT_VERSION=$(node -p "try { require('./workers/task-api/package.json').dependencies['@wolffm/task'] } catch { 'none' }")
          echo "Current version: $CURRENT_VERSION"
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_ENV
          
          # Run fast backup script (file only for speed in CI)
          pip install requests
          if python scripts/backup-kv.py fast-backup; then
            echo "backup-success=true" >> $GITHUB_OUTPUT
            echo "✅ Fast backup successful (file only)"
          else
            echo "backup-success=false" >> $GITHUB_OUTPUT
            echo "❌ Backup failed! Flush step will be skipped."
          fi
      
      - name: Upload KV backup as artifact
        if: steps.backup.outputs.backup-success == 'true'
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: kv-backup-${{ github.sha }}
          path: backups/*.json
          retention-days: 90
          if-no-files-found: error
      
      # Flush step disabled - run manually when needed with: python scripts/administration.py kv-flush
      # - name: Flush KV namespace (only if backup succeeded)
      #   if: steps.backup.outputs.backup-success == 'true' && github.event.client_payload.flush_kv == 'true'
      #   continue-on-error: true
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_WORKER_FLUSH_TOKEN }}
      #     FLUSH_CONFIRM: yes
      #   run: |
      #     echo "🗑️  Flushing KV namespace (backup created successfully)..."
      #     echo "⚠️  This will delete all existing data"
      #     
      #     python scripts/administration.py kv-flush --force
      #     
      #     echo "✅ KV namespace flushed - ready for new storage structure"
      
      - name: Update packages
        run: |
          PACKAGES='${{ steps.parse.outputs.packages }}'
          echo "📦 Updating packages..."
          
          echo "$PACKAGES" | jq -r '.[]' | while read -r package; do
            echo "Updating $package to latest version..."
            
            # Update in workspace root
            pnpm add -w "$package@latest"
            echo "✅ Updated $package in root package.json"
            
            # If it's @wolffm/task, also update in workers/task-api
            if [ "$package" = "@wolffm/task" ]; then
              echo "📦 Updating $package in workers/task-api..."
              cp .npmrc ./workers/task-api/
              pnpm --filter task-api add "$package@latest"
              echo "✅ Updated $package in workers/task-api"
            fi
          done
          
          echo "✅ All package updates complete"
      
      - name: Update task bundle
        if: steps.parse.outputs.update_task == 'true'
        run: |
          echo "🔨 Rebuilding task bundle..."
          echo "📦 Updating task micro-frontend bundle..."
          pnpm run update-task-bundle
          echo "✅ Updated public/mf/task/ bundle files"
          
          # Regenerate registry with new version numbers for cache busting
          echo "📦 Regenerating registry with cache-busting version..."
          pnpm run generate-registry
          echo "✅ Updated public/mf/registry.json with new versions"
      
      - name: Update watchparty bundle
        if: steps.parse.outputs.update_watchparty == 'true'
        run: |
          echo "🔨 Rebuilding watchparty bundle..."
          echo "📦 Updating watchparty micro-frontend bundle..."
          pnpm run update-watchparty-bundle
          echo "✅ Updated public/mf/watchparty/ bundle files"
          
          # Regenerate registry with new version numbers for cache busting
          echo "📦 Regenerating registry with cache-busting version..."
          pnpm run generate-registry
          echo "✅ Updated public/mf/registry.json with new versions"
      
      - name: Regenerate registry for themes
        if: steps.parse.outputs.update_themes == 'true'
        run: |
          echo "📦 Regenerating registry for themes update..."
          pnpm run generate-registry
          echo "✅ Updated public/mf/registry.json with new versions"
      
      - name: Commit and push if changed
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if any package files or bundle files changed
          if git diff --quiet package.json pnpm-lock.yaml workers/task-api/package.json public/mf/; then
            echo "ℹ️  No package updates needed"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            PACKAGES='${{ steps.parse.outputs.packages }}'
            PACKAGE_LIST=$(echo "$PACKAGES" | jq -r '.[]' | paste -sd ", " -)
            
            git add package.json pnpm-lock.yaml workers/task-api/package.json public/mf/
            git commit -m "chore: update packages - $PACKAGE_LIST" \
                       -m "Auto-updated from repository dispatch" \
                       -m "Packages: $PACKAGE_LIST" \
                       -m "Triggered by: ${{ github.event.client_payload.sha || 'manual' }}"
            git push
            echo "✅ Updated packages and pushed changes"
            echo "updated=true" >> $GITHUB_OUTPUT
            
            # Save new task version for comment (if task was updated)
            if [ "${{ steps.parse.outputs.update_task }}" = "true" ]; then
              NEW_VERSION=$(node -p "require('./workers/task-api/package.json').dependencies['@wolffm/task']")
              echo "new-version=$NEW_VERSION" >> $GITHUB_ENV
            fi
          fi
      
      - name: Comment with backup info
        if: steps.commit.outputs.updated == 'true'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            let backupFile = 'unknown';
            try {
              const backupFiles = fs.readdirSync('backups');
              backupFile = backupFiles.find(f => f.startsWith('tasks-kv-backup-')) || 'unknown';
            } catch (e) {
              console.log('No backup files found');
            }
            
            // Get the latest commit (the one we just pushed)
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            const latestCommit = commits[0].sha;
            
            const packages = '${{ steps.parse.outputs.packages }}';
            const packageList = JSON.parse(packages).join(', ');
            
            const taskUpdated = '${{ steps.parse.outputs.update_task }}' === 'true';
            
            let body = `## � Package Update${packageList.includes(',') ? 's' : ''}\n\n`;
            body += `**Updated Packages:** ${packageList}\n\n`;
            
            if (taskUpdated) {
              body += `**@wolffm/task Version**\n`;
              body += `- Old version: \`${{ env.current-version }}\`\n`;
              body += `- New version: \`${{ env.new-version }}\`\n\n`;
              
              body += `**Backup Information**\n`;
              body += `- Backup file: \`${backupFile}\`\n`;
              body += `- Artifact: \`kv-backup-${{ github.sha }}\`\n`;
              body += `- Retention: 90 days\n\n`;
              
              body += `**To download the backup:**\n`;
              body += `1. Go to [this workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
              body += `2. Download the \`kv-backup-${{ github.sha }}\` artifact\n\n`;
              
              body += `**To restore from backup:**\n`;
              body += `\`\`\`bash\n`;
              body += `python scripts/administration.py kv-restore backups/${backupFile}\n`;
              body += `\`\`\`\n\n`;
              
              body += `⚠️ **Note:** If the new package uses a different storage structure, you may need to flush KV:\n`;
              body += `\`\`\`bash\n`;
              body += `python scripts/administration.py kv-flush --force\n`;
              body += `\`\`\``;
            }
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: latestCommit,
              body
            });
      
      - name: Trigger deployment
        if: success()
        run: |
          echo "🚀 Task package update complete. Deployment workflows will be triggered automatically."

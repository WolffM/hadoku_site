name: Update Child Packages

on:
  repository_dispatch:
    types: [package_updated]
  workflow_dispatch:

permissions:
  contents: write
  packages: read

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.HADOKU_SITE_TOKEN }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Create .npmrc for GitHub Packages
        run: |
          echo "@wolffm:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.DEPLOY_PACKAGE_TOKEN }}" >> .npmrc
      
      - name: Backup KV namespace before package update
        id: backup
        if: github.event.client_payload.package == '@wolffm/task'
        continue-on-error: true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          echo "üì¶ Creating KV backup before @wolffm/task package update..."
          
          # Install wrangler globally
          npm install -g wrangler
          
          # Get current version before update
          CURRENT_VERSION=$(node -p "try { require('./workers/task-api/package.json').dependencies['@wolffm/task'] } catch { 'none' }")
          echo "Current version: $CURRENT_VERSION"
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_ENV
          
          # Run backup script (using Python for reliable Cloudflare API access)
          pip install requests
          if python scripts/backup-kv.py; then
            echo "backup-success=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Backup completed successfully"
          else
            echo "backup-success=false" >> $GITHUB_OUTPUT
            echo "‚ùå Backup failed! Flush step will be skipped."
          fi
      
      - name: Upload KV backup as artifact
        if: github.event.client_payload.package == '@wolffm/task' && steps.backup.outputs.backup-success == 'true'
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: kv-backup-${{ github.sha }}
          path: backups/*.json
          retention-days: 90
          if-no-files-found: error
      
      # Flush step disabled - run manually when needed with: node scripts/flush-kv.mjs
      # - name: Flush KV namespace (only if backup succeeded)
      #   if: github.event.client_payload.package == '@wolffm/task' && steps.backup.outputs.backup-success == 'true' && github.event.client_payload.flush_kv == 'true'
      #   continue-on-error: true
      #   env:
      #     CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_WORKER_FLUSH_TOKEN }}
      #     FLUSH_CONFIRM: yes
      #   run: |
      #     echo "üóëÔ∏è  Flushing KV namespace (backup created successfully)..."
      #     echo "‚ö†Ô∏è  This will delete all existing data"
      #     
      #     node scripts/flush-kv.mjs
      #     
      #     echo "‚úÖ KV namespace flushed - ready for new storage structure"
      
      - name: Update package
        run: |
          PACKAGE="${{ github.event.client_payload.package }}"
          echo "üì¶ Updating $PACKAGE to latest version..."
          
          # Update root package
          npm install $PACKAGE@latest
          echo "‚úÖ Updated root package.json and package-lock.json"
          
          # Update worker directory
          echo "üì¶ Updating $PACKAGE in workers/task-api..."
          cp .npmrc ./workers/task-api/
          npm install --prefix ./workers/task-api $PACKAGE@latest
          echo "‚úÖ Updated workers/task-api/package.json and package-lock.json"
          
          # Update task bundle (copies dist files to public/mf/task/)
          echo "üì¶ Updating task micro-frontend bundle..."
          npm run update-task-bundle
          echo "‚úÖ Updated public/mf/task/ bundle files"
          
          # Regenerate registry with new version numbers for cache busting
          echo "üì¶ Regenerating registry with cache-busting version..."
          npm run generate-registry
          echo "‚úÖ Updated public/mf/registry.json with new versions"
      
      - name: Commit and push if changed
        id: commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if any package files or bundle files changed
          if git diff --quiet package.json package-lock.json workers/task-api/package.json workers/task-api/package-lock.json public/mf/; then
            echo "‚ÑπÔ∏è  No package updates needed"
            echo "updated=false" >> $GITHUB_OUTPUT
          else
            git add package.json package-lock.json workers/task-api/package.json workers/task-api/package-lock.json public/mf/
            git commit -m "chore: update ${{ github.event.client_payload.package }} to latest"
            git push
            echo "‚úÖ Updated package and pushed changes"
            echo "updated=true" >> $GITHUB_OUTPUT
            
            # Save new version for comment
            NEW_VERSION=$(node -p "require('./workers/task-api/package.json').dependencies['@wolffm/task']")
            echo "new-version=$NEW_VERSION" >> $GITHUB_ENV
          fi
      
      - name: Comment with backup info
        if: steps.commit.outputs.updated == 'true' && github.event.client_payload.package == '@wolffm/task'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            let backupFile = 'unknown';
            try {
              const backupFiles = fs.readdirSync('backups');
              backupFile = backupFiles.find(f => f.startsWith('tasks-kv-backup-')) || 'unknown';
            } catch (e) {
              console.log('No backup files found');
            }
            
            // Get the latest commit (the one we just pushed)
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            const latestCommit = commits[0].sha;
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: latestCommit,
              body: `## üîÑ KV Backup Created
            
            **Package Update**
            - Package: \`@wolffm/task\`
            - Old version: \`${{ env.current-version }}\`
            - New version: \`${{ env.new-version }}\`
            
            **Backup Information**
            - Backup file: \`${backupFile}\`
            - Artifact: \`kv-backup-${{ github.sha }}\`
            - Retention: 90 days
            
            **To download the backup:**
            1. Go to [this workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Download the \`kv-backup-${{ github.sha }}\` artifact
            
            **To restore from backup:**
            \`\`\`bash
            python scripts/restore-kv.py backups/${backupFile}
            \`\`\`
            
            ‚ö†Ô∏è **Note:** If the new package uses a different storage structure, you may need to flush KV:
            \`\`\`bash
            python scripts/flush-kv.py
            # Type "FLUSH" when prompted to confirm
            \`\`\``
            });
      
      - name: Trigger deployment
        if: success()
        run: |
          echo "üöÄ Package update complete. Deployment workflows will be triggered automatically."
